1. MVC框架：model模型、view视图、controller控制器
   而Django的MVC：model、template、view

2. django框架的mvc流程：用户User发出访问请求-->服务器（Uwsgi、nginx）-->Django（Router路由解析-- 
   -->View[controller]-->Model-->Template渲染）-->发生至浏览器展示内容

3. Django框架创建流程：创建django工程，即Project-->在工程下创建APP，俗称应用程序-->完成

4. 关于POST和GET请求：
   -->区别：a.GET把参数包含在URL里面，而POST通过request body传递参数
            b.简单理解即前者是明文传递数据，后者为加密传递
            c.后者比前者安全，通常传输用户名密码
            
5. 几个入门命令：
   -->a.创建项目：django-admin startproject projectname
      b.创建APP（进入工程目录）：python manage.py appname
      c.创建库表（进入工程目录）：python manage.py makemigrations
      d.执行库表建立（进入工程目录）：python manage.py migrate
      模板渲染嵌入语法：在HTML可以嵌入后台语言 区分符号--->     {%命令%}  {{变量}}
      
6. 几个入门设置：
   -->django框架时间设置
      django APP添加
      templates目录设置

7. 项目目录结构：
   -->manage.py管理程序的文件，启动和结束等
      setting.py程序的配置文件，=部署和配置整个工程的配置文件
      url.py程序的路由系统，即url和处理函数对应的关系
      wsgi.py基于WSGI的web服务器的配置文件
      _init_.py:一个将工程目录定义为包的空文件

8. 创建Django工程的流程：
   -->a.新建工程：\>django-admin startproject projectname
      b1.修改工程：创建一个具体应用【app】，python manage.py startapp appname
      b2.修改过程：修改应用views.py：对URL的具体响应功能
      b3. 修改工程：修改URL路由：指定URL与响应之间的关系
      c.运行工程：\>python manage.py mysite
   -->有关命令：
      Django admin：django框架全局的管理工具
      \>python manage.py <command>[options]

9. 记录一下：
   -->在django框架最小程序helloapp时发生：__init__() takes 1 positional argument but 2 were given错误
   -->原因：导包错误from django.http import HttpResponse使用为HttpRquest

10. django的MTV开发模式：
   -->M:models模型，与数据相关的功能（组织和存储数据的方法和模式，与数据模型相关操作）
      T：templates模板，与表现相关的所有功能（页面展示风格和方式）
      V：views视图，针对请求选取数据的功能（选择哪些数据用于展示，指定显示模板，每个URL对应一个回调函数）
      M《=V=》T桥梁
   练习，最小程序helloapp的改进（使用MTV框架返回静态页面）：
      -->新建hello2app应用
         使用004.html为返回页面，修改views.py
         在hello2app应用增加路由文件
         在全局路由文件增加对应用路由文件的引用path("index2",include(hello2app.urls)),include()方法？？
         设置模板路径，让django框架找到模板所在目录，在setting.app中找到templates中的dir[os...]
   -->from django.shortcuts import render
      rend()事实上是一个打包函数，第一个参数是request，第二个参数是页面
   -->新增本地路由文件from . import views其中.代表当前app
   -->增加对本地路由的引用
   -->设置模板路径，让django框架找到模板所在目录
   -->include()方法用于专门引入其他路由文件
      记录一下：
          -->练习时出现：TypeError: 'module' object is not iterable错误
          -->原因是在写本地路由地址hello2app.urls时模块错误书写urlpatterns写成urlpaaterns
      
11. 云端留言板开发流程：
    -->基本功能定义：
       ·提交留言功能：
            用户设定自己的名字为A，指定任意名字B
            向B留言，记为msg,留言保存在云端
       ·获取留言功能：
            输入名字A，云端返回10条最新留言记录
    -->a.新建工程cloudms
       b.新建应用msgapp
       c.增加模板，即显示界面的HTML/CSS/JS代码，配置路径
       d.设置URL路由，本地以及全局路由
       e.编写交互代码
       f.运行工程
    -->记录一下在实验中出现的问题：
      （1）发生TemplateDoesNotExist：
          原因：在工程的setting文件配置路径时发生错误
      （2）在提交留言功能处发生RuntimeError at /msggate
          原因：在HTML文件编写时action获取POST请求时，路由名称没有和action（msggate/缺少/）中一致
          参考： https://blog.csdn.net/likunkun__/article/details/87380892
      （3）存在问题：获取留言功能区无法获取留言信息

12. django框架进阶：
    -->（1）django的URL路由机制
       （2）django的视图响应类型
       （3）django的视图流式响应机制
       （4）django的模板引擎和模板使用
       （5）django模板语言入门
    -->django的路由机制：
       URL----定义、转换、传参、命名等----views
       a.路由是关联URL及其处理函数关系的过程
         setting.py文件中ROOT_URLCONF变量指定全局路由文件名称
             ROOT_URLCONF = '<工程名称>.urls' # 默认对应工程目录下urls.py文件
         django使用urlpatterns变量表示路由（url.py），该变量是列表类型，由path()或re_path()作为元素使用
       b.django的URL路由流程：
         [1] django查找全局urlpatterns变量（url.py）
         [2] django按照先后顺序，对URL逐一匹配urlpatterns每个元素
         [3] 找到第一个匹配时，停止查找，根据匹配结果执行相应的处理函数
         [4] 如果没有找到匹配或者出现异常，django进行错误处理
       c.注意：
         django的路由不考虑HTTP请求方式，仅根据URL进行路由
         只要URL相同，无论POST、GET等请求方式都指向同一个操作函数
       d.路由path()和re_path的异同：
         [1] path(route,views)处理字符串路由，re_path(route,views)后者处理正则表达式路由
         [2] 路由函数path(route, view, kwargs=None, name=None):
             route:url或URL模式，django定义的URL转换语法
             view：处理（视图）函数名称，或include()类
             kwargs: 向处理函数提供的额外参数，以字典形式表示
             name: 给URL模式的命名
       e.django支持的三种route表达方式：
         [1] 精确字符串格式：articles/2003/
         [2] django的转换格式: <类型:变量名> ，articles/<int:year>/
         [2] 正则表达格式：articles/(?P<year>[0~9]{4})
    -->view的使用：
       a.两种类型：处理函数和include()函数
         处理函数：views.py中处理URL的对应函数，URL处理的归宿
         include:包含其他路由信息的函数，分段路径组合形成总路径
       b.include的用法：附加本地路由/路径去重
    -->django的视图响应类型：
       a.视图函数（接受HTTP请求并返回响应）编写原则：
         [1] 可以返回web文本、页面、重定向、错误、图片等任何内容
         [2] 视图函数通过HttpRssponse、JsonResponse等类表达并返回响应
         [3] 按约定，视图函数放在对应app中的views.py文件中
    -->django的响应类型：django.http包含所有响应类型
       HttpResponse类、JsonResponse类、StreamingHttpResponse类、FileRespon
       a.HttpResponse(content,content_type=None,status=200,charset=None)
         [1] content拟返回的字符串
         [2] content_type：MIME格式的返回内容类型
         [3] status响应状态码
         [4] charset响应的字符集
       b.JsonResponse(data)：
         [1]  data : 字典类型，返回的JSON类型数据
       c.StreamingHttpResponse(streaming_content):
         [1] streaming_content : 内容的迭代器形式，以内容流的方式响应
    -->django请求类型的判断：
       django.views.decorators.http
    -->django的视图流式响应机制：
       a.django的响应类型：
         [1] 一次性响应： HttpResponse类、JsonResponse类
         [1] 流式响应：StreamingHttpResponse类、FileResponse类，适合大文本文、大二进制文件传输
       b.yield关键字：包含yield语句的函数是一个生成器（迭代器的一种）
         生成器每次产生一个值（yield语句），函数被冻结，被唤醒后再产生一个值，生成器是一个不断产生值的函数
    -->django的模板引擎和模板使用：
       a.模板引擎是模板响应的后端:django, Jinja2
       b.settings.py文件中对模板引擎进行配置 （BACKEND）
       c.模板的查找：get_template(template_name) -> Template类
         在模板目录列表中，依次查找某个模板，直到找到并返回Template类,如果未找到模板，则抛出TemplateDoesNotExist异常
       d.模板的渲染：Template.render(context, request) -> HTML字符串
         render()方法用于将模板结合内容渲染成HTML字符串
         context : 字典类型，用于加载到模板中的内容
         request : HTTP请求
       e.模板使用步骤：
         [1] 指定template：定义一哥template类
         [2] 进行渲染：通过context类或字典类
       
12. reder()方法
    -->用来打开html文件，对文件进行模板渲染，第一个参数是request，第二个参数是html文件路径（可以只写文件名称，django自动查找template文件夹），
       渲染完成后，返回页面数据，最终交给wsgi中的socket发生到客户端

13. request类常用属性及方法：
    -->request.META, 请求头信息, 返回一个标准的python字典，包含所有的HTTP首部
       request.POST
       request.GET
       request.method
       request.user, 匿名用户
       request.get_full_path, 获取完整路径（包含查询参数的） 
       request.FILES, 上传的文件数据，返回文件名称
       request.FILES.get,类似于文件句柄
       
14. Response相关属性和方法：
    -->return HttpResponse()
       return render()
       return redirect(/home/), 重定向, 封装了302状态码
    -->添加相应头键值对：
       ret = render(request, '/home/', status = 202) #render修改状态码
       ret['a'] = b
       return ret   #回复html页面
       
15. CBV和FBV：
    -->两种视图逻辑的写法
       FBV: function based view, 基于函数来写视图逻辑
       CBV：class based view, 基于类来写视图
    -->CBV写视图函数：
       class loginView(View):
            # get请求，获取login界面
           def get(self, request):
               return render(request, 'login.html')
            # post请求，获取请求的数据并进行校验
           def post(self, request):
               print(request.POST)
               return render(request, 'login.html')
       对应url路由书写发生变化：
           url('/login/', views.loginView.as_view())
    -->FBV加装饰器：
       它们封装一个函数，并且用这样或者那样的方式来修改它的行为。
       def outer(f):
          def inner(request):
             print('xx')
             ret = f(request)
             print('yy')
             return ret
          return inner
