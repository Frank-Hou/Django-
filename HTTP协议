1. HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传输协议，特性：
   -->a.基于TCP/IP协议，浏览器socket client《==》网站服务器socket server
      b.短链接 
      c.被动响应
      d.无状态，即服务器端不记得是哪个客户端在请求
      采用URL作为定位网络资源的标识：http://host[:port][path]

2. 基于socket的上层封装-------WSGI
   -->是一种规范，定义了使用python编写的web app与web（socket服务器）之间接口格式，实现了web app
      与web server之间的解耦，当规范建立后程序就不用重复编写web server
      
3. HTML本身是一段文本，由标签组成，浏览器负责解析HTML，并展示成web页面内容

4. HTML的常用标签：
   -->标题：h1,h2,,,,
      段落：p
      换行：br
      容器：div,span
      表格：table，tr,td
      列表：ul,ol,li
      链接：a
      图片：img
      表单：input
      
5. CSS（Cascading Style Sheets层叠样式表）技术理念：
   -->HTML负责数据组织（使用标签形式表达数据），CSS负责样式表达（键值对形式）
   -->CSS的三种写法：
      行内模式：在标签的style属性中熟悉我
      业内模式：在HTML网页中使用独立的<style>标签书写
      外部模式：单独在CSS文件中书写
   
6. HTTP协议对资源的操作：
   -->GET方法：请求获取URL位置的资源，提交的数据放在url之后，以？分割url和传输数据，提交的数据大小有限制
      HEAD方法：请求获取URL位置资源的响应消息报告，即获得该资源的头部信息,好处是不必全部传输即可获取“该资源的信息”
      POST方法: 请求向URL位置的资源后附加新的数据，post方法把提交的数据放在HTTP的请求体中
      PUT方法：请求向URL位置存储一个资源，覆盖原URL位置的资源
      PATCH方法：请求局部更新URL位置的资源，即改变该处资源的部分内容
      DELETE方法：请求删除URL位置存储的资源
      
7. web服务器：
   -->web server是软件工具，用于提供HTTP/HTTPS访问服务
      常见的web服务器：apache、nginx、iis.... 
      
8. URL:
   --->超文本传输协议HTTP的统一资源定位符从因特网获得信息的五个基本信息包括在个简单地址：
       ·传输协议
       ·层级url标记符号【//】
       ·访问资源需要的凭证信息（可忽略）
       ·服务器（通常为域名，或IP地址）
       ·端口号
       ·路径
       ·查询（get模式的窗口参数，以？为起点，每个参数以"&"分隔，再以"="分开参数名称和数据
       ·片段...
 
 9. HTTP请求格式和响应格式：
 
 10. HTTP状态码：
     --->1xx消息: 请求已被服务器接受，继续处理
     --->2xx成功：请求以成功被服务器接收、理解、并接受
     --->3xx重定向：需要后续操作才能完成这个请求
     --->4xx请求错误：请求含有语法错误或无法被执行
     --->5xx服务器错误: 服务器在处理某个正确请求时发生错误
 
11. 在一个项目可有多个应用，每个应用完成项目的部分功能。在django框架看来，每个应用都有自己的逻辑部分，数据库部分等等，所以我们进行业务逻辑开发的时候需要创建应用写逻辑，


 
 
       
       


